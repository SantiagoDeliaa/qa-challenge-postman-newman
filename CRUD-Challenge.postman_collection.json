{
	"info": {
		"_postman_id": "0e980e4f-3c22-4db5-ac3b-d8394eb73e13",
		"name": "CRUD-Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28177028"
	},
	"item": [
		{
			"name": "addNewPet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomId = Date.now() % 1000000;\r",
							"pm.environment.set('pet_id', randomId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"//Validate the name\r",
							"pm.test(\"Correct name\", () => {\r",
							"  pm.expect(json.name).to.eql(\"test_toby\");\r",
							"});\r",
							"\r",
							"//Validate the status\r",
							"pm.test(\"Correct status\", () => {\r",
							"  pm.expect(json.status).to.eql(\"available\");\r",
							"});\r",
							"\r",
							"//Validate the tag\r",
							"pm.test(\"Correct tag\", () => {\r",
							"  pm.expect(json.tags[0].name).to.eql(\"big_dog\");\r",
							"});\r",
							"\r",
							"//Validate the id(>0)\r",
							"pm.test(\"Assigned and valid id\", () => {\r",
							"  pm.expect(json.id).to.be.a(\"number\").and.above(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{pet_id}},\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"dog\"\r\n  },\r\n  \"name\": \"test_toby\",\r\n  \"photoUrls\": [\r\n    \"testPhoto\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"big_dog\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/pet",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "getById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"const body = pm.response.json();\r",
							"const expectedId = Number(pm.environment.get('pet_id'));\r",
							"\r",
							"//Validate id matches the one generated\r",
							"pm.test(\"id validation\", () => {\r",
							"  pm.expect(body.id).to.eql(expectedId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/pet/{{pet_id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"pet",
						"{{pet_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updatePet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"//Validate that the name was updated\r",
							"pm.test(\"Name updated successfully\", () => {\r",
							"  pm.expect(json.name).to.eql(\"toby-update\");\r",
							"});\r",
							"\r",
							"//Validate that the status was updated\r",
							"pm.test(\"Status updated successfully\", () => {\r",
							"  pm.expect(json.status).to.eql(\"pending\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{pet_id}},\r\n  \"category\": {\r\n    \"id\": 1,\r\n    \"name\": \"dog\"\r\n  },\r\n  \"name\": \"toby-update\",\r\n  \"photoUrls\": [\r\n    \"testPhoto\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"big dog\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/pet",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "deletePet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"const expectedId = String(pm.environment.get(\"pet_id\"));  \r",
							"\r",
							"pm.test(\"Validate delete id\", () => {\r",
							"  pm.expect(json.message).to.eql(expectedId);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/pet/{{pet_id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"pet",
						"{{pet_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getById-afterDelete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"Delete confirmation\", () => {\r",
							"  pm.expect(json.message).to.eql(\"Pet not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/pet/{{pet_id}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"pet",
						"{{pet_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "findByStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"const json = pm.response.json();\r",
							"\r",
							"pm.test(\"All status are 'pending'\", () => {\r",
							"  json.forEach(pet => {\r",
							"    pm.expect(pet.status).to.eql(\"pending\");\r",
							"  });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/pet/findByStatus?status={{status}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"pet",
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "{{status}}"
						}
					]
				}
			},
			"response": []
		}
	]
}